events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 基本配置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # 上游服务器配置
    upstream flask_app {
        server card-query-app:5000;
        keepalive 32;
    }
    
    # HTTP服务器配置 - apex 域名（提供健康检查与 ACME，并重定向到 HTTPS）
    server {
        listen 80;
        server_name km.videox.xyz;

        # ACME 挑战验证（Let's Encrypt）
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root /var/www/certbot;
        }

        # 健康检查直接透传到应用
        location /health {
            proxy_pass http://flask_app/health;
            access_log off;
        }

        # 其他请求统一重定向到HTTPS（统一到裸域）
        location / {
            return 301 https://km.videox.xyz$request_uri;
        }
    }

    # HTTP服务器配置 - www 域名（仅用于 ACME 与重定向到裸域）
    server {
        listen 80;
        server_name www.km.videox.xyz;

        # ACME 挑战验证（Let's Encrypt）
        location ^~ /.well-known/acme-challenge/ {
            default_type "text/plain";
            root /var/www/certbot;
        }

        # 统一重定向到裸域HTTPS
        location / {
            return 301 https://km.videox.xyz$request_uri;
        }
    }
    
    # HTTPS服务器配置 - apex 裸域（提供应用代理）
    server {
        listen 443 ssl http2;
        server_name km.videox.xyz;

        # SSL证书配置（Let’s Encrypt 颁发的正式证书路径）
        ssl_certificate /etc/letsencrypt/live/km.videox.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/km.videox.xyz/privkey.pem;

        # SSL安全配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # HTTPS安全头
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # 主要代理配置
        location / {
            proxy_pass http://flask_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;

            # 超时设置
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # 健康检查
        location /health {
            proxy_pass http://flask_app/health;
            access_log off;
        }

        # 静态文件处理
        location /static/ {
            proxy_pass http://flask_app/static/;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }

    # HTTPS服务器配置 - www 子域（仅做重定向到裸域）
    server {
        listen 443 ssl http2;
        server_name www.km.videox.xyz;

        # 证书与 apex 共用同一套（已为两个域名申请）
        ssl_certificate /etc/letsencrypt/live/km.videox.xyz/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/km.videox.xyz/privkey.pem;

        return 301 https://km.videox.xyz$request_uri;
    }
}
